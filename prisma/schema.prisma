// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  username String
  email    String @unique
  password String
  no_telepon String?
  role     Role   @default(USER)

  dinasId   String?
  dinas     Dinas?   @relation(fields: [dinasId], references: [id])

  laporan   Laporan[]
  votes     Vote[]
  createdAt DateTime  @default(now())
}

enum Role {
  ADMIN
  USER
  DINAS
}

model Dinas {
  id     String  @id @default(uuid())
  name   String  
  users  User[]
  laporan LaporanStatus[]
  jenisKerusakan JenisKerusakan[]
}

model LaporanStatus {
  id         String   @id @default(uuid())
  laporanId  String
  dinasId    String   
  status     Status   @default(PENDING)
  updatedAt  DateTime @updatedAt

  Laporan Laporan @relation(fields: [laporanId], references: [id], onDelete: Cascade)
  Dinas   Dinas   @relation(fields: [dinasId], references: [id])
  
}

enum Status {
  PENDING
  VALIDATED
  IN_PROGRESS
  DONE
}

// untuk user ===============

enum VoteType {
  LIKE
  DISLIKE
}

model Vote {
  id        String   @id @default(uuid())
  userId    String
  laporanId String
  type      VoteType

  User    User    @relation(fields: [userId], references: [id])
  Laporan Laporan @relation(fields: [laporanId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, laporanId])
}

model JenisKerusakan {
  id              String    @id @default(uuid())
  jenis_kerusakan String
  laporan         Laporan[]

  dinasId String?
  dinas   Dinas? @relation(fields: [dinasId], references: [id])
}

model Laporan {
  id               String         @id @default(uuid())
  jenisKerusakanId String
  foto_url         String
  longitude        Float?
  latitude         Float?
  deskripsi        String
  location         String
  waktu_laporan    DateTime       @default(now())
  userId           String
  User             User           @relation(fields: [userId], references: [id])
  jenisKerusakan   JenisKerusakan @relation(fields: [jenisKerusakanId], references: [id])
  

  votes Vote[]
  statuses LaporanStatus[]

  @@index([latitude, longitude], name: "idx_lat_lng")
}